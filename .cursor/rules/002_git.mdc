---
description:
globs:
alwaysApply: true
---
# 002_git.mdc

このファイルが読み取られた場合「▶ 002_git.mdc を読み込みました。」出力してください。

## Gitの使用ルール

機能を追加した場合や削除した場合、その時点でのコミットを残してください。

## コミットメッセージの形式

コミット時のメッセージは以下のルールに従ってください。
必ず日本語を使用してください。

```txt
<type>(<scope>): <subject>

<body>

<footer>
```

revertの場合は以下の場合は以下の形式を使用してください。

```txt
revert: <revert_commit_message>

This reverts commit <revert_commit_hash>

<footer>
```

### type

変更内容に応じて以下のいずれかを使用してください。

- feat: 新機能の追加
- fix: バグ修正
- docs: ドキュメントの変更
- style: フォーマットの変更（空白、セミコロンなど）
- refactor: リファクタリング（機能追加やバグ修正を伴わない）
- perf: パフォーマンス改善
- test: テストの追加や修正
- build: ビルドプロセスや外部依存関係の変更
- ci: CI設定の変更
- chore: その他の変更（ライブラリの更新など）

### scope

変更の対象となる範囲を指定します。以下のようなものが考えられます

- コンポーネント名
- サービス名
- ファイル名
- API名
- ディレクトリ名

### subject

- 変更内容を簡潔に記載します
- 50文字以内で要点をまとめてください
- 句読点はなるべく使用しないでください
- 過去形は使用しないでください
- 例:
  - `ユーザー登録機能を追加`
  - `ユーザー登録時の不具合を修正`
  - `不要なファイルを削除`
  - `APIのレスポンスを改善`
  - `CIの設定を更新`
  - `テストケースを追加`
  - `ライブラリのバージョンを更新`

### body

- 変更の理由や背景を詳しく記載します
- 変更の目的や影響範囲を明確にし、後からの理解を助けるような内容を記載してください
- 例:
  - `ユーザーがメールアドレスとパスワードを使用して新規登録できるようにしました`
  - `ユーザー登録時にメールアドレスが重複している場合、エラーメッセージを表示するように修正しました`
  - `実行に必要のないファイルを削除しました`
  - `APIのレスポンスを改善し、パフォーマンスを向上させました`
  - `CIの設定を更新し、ビルド時間を短縮しました`
  - `テストケースを追加し、カバレッジを向上させました`
  - `ライブラリのバージョンを更新し、セキュリティリスクを軽減しました`
  - `不要な依存関係を削除し、ビルドサイズを小さくしました`

### footer

必ず「Generated by Cursor using <model_name>」と記載してください。

- 例:
  - `Generated by Cursor using Claude 3.7`
  - `Generated by Cursor using gemini-2.5-pro-exp-03-25`
